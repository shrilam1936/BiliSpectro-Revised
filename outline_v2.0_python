import tensorflow as tf
import numpy as np
# Load and preprocess data (CSV)
import pandas as pd
data = pd.read_csv('photonData.csv')
features = data[['Wavelength', 'PathLength', 'Intensity']].values
labels = data['AbsorbedLayer'].astype('category').cat.codes.values # convert layer to categorical integer

# split data into training and validation sets
from sklearn.model_selection import train_test_split
x_train, x_val, y_train, y_val = train_test_split(features, labels, test_size=0.2, random_state=42)

model = tf.keras.Sequential([
    tf.keras.layers.Input(shape=(3,)), # Input layer with 3 features
    tf.keras.layers.Dense(16, activation='relu'), # First hidden layer with 16 units
    tf.keras.layers.Dense(8, activation='relu'), # Second hidden layer with 8 units
    tf.keras.layers.Dense(4, activation='relu'), # Third hidden layer with 4 units
    tf.keras.layers.Dense(len(set(labels)), activation='softmax') # Output layer for classification
])

model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
model.fit(x_train, y_train, epochs=30, batch_size=16, validation_data=(x_val, y_val))

model.save('photon_classification_model.h5')
converter = tf.lite.TFLiteConverter.from_keras_model(model)
converter.optimizations = [tf.lite.Optimize.DEFAULT]
tflite_model = converter.convert()
with open('photon_classification_model.tflite', 'wb') as f:
    f.write(tflite_model)
